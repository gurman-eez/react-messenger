{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","liked","allPosts","className","SearchPanel","state","term","onUpdateSearch","e","target","value","setState","props","type","placeholder","onChange","this","Component","PostListItem","label","onDelete","onToggleImportant","onToggleLiked","classNames","important","like","onClick","PostList","posts","onToggle","elements","map","elem","id","otherProps","key","PostStatusFilter","buttons","name","filter","onFilterSelect","clasS","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","App","data","nextId","deleteItem","index","findIndex","slice","body","length","newItem","i","old","searchPosts","items","item","toUpperCase","indexOf","filterPosts","newData","el","visiblePosts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8381fcd7.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\n\r\nexport default AppHeader;","import React from 'react';\r\n\r\nimport './app-header.css';\r\n\r\nconst AppHeader = ({liked, allPosts}) => {\t\t\t\t// выводим пропсы\r\n\treturn (\r\n\t\t<div className='app-header d-flex'>\r\n\t\t\t<h1>Elvin Zeinalabdziyeu</h1>\r\n\t\t\t<h2>{allPosts} posts, liked: {liked}</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;","import React, {Component} from 'react';\r\n\r\nimport './search-panel.css';\r\n\r\nexport default class SearchPanel extends Component {\r\n\r\n\tstate = {\t\t\t\t\t\t\t\t\t// \tзадаем значение в поиске\r\n\t\tterm: ''\r\n\t}\r\n\r\n\tonUpdateSearch = (e) => {\t\t\t\t// обновление поиска\r\n\t\tconst term = e.target.value;\r\n\t\tthis.setState({term});\r\n\t\tthis.props.onUpdateSearch(term);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<input\r\n\t\t\t\tclassName='form-conrol search-input'\r\n\t\t\t\ttype='text'\r\n\t\t\t\tplaceholder='Search post'\r\n\t\t\t\tonChange={this.onUpdateSearch} />\r\n\t\t)\r\n\t}\r\n}\r\n","import PostListItem from './post-list-item';\r\n\r\nexport default PostListItem;","import React from 'react';\r\n\r\nimport './post-list-item.css';\r\n\r\nconst PostListItem = ({ label, onDelete, onToggleImportant, onToggleLiked, important, like }) => {\t\t// достаем пропсы\r\n\t\t\r\n\t\tlet classNames = 'app-list-item d-flex justify-content-between';\t\t// базовый класс каждой кнопки\r\n\r\n\t\tif (important) {\t\t\t\t\t\t\t\t// добавление класса\r\n\t\t\tclassNames += ' important'\r\n\t\t}\r\n\r\n\tif (like) {\r\n\t\t\tclassNames += ' like'\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className={classNames}>\r\n\t\t\t\t<span \r\n\t\t\t\tclassName='app-list-item-label'\r\n\t\t\t\t\tonClick={onToggleLiked}>\r\n\t\t\t\t\t{label}\r\n\t\t\t</span>\r\n\t\t\t\t<div className='d-flex justify-content-center align-items-center'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='btn-star btn-sm'\r\n\t\t\t\t\t\tonClick={onToggleImportant}>\r\n\t\t\t\t\t\t<i className='fa fa-star'></i>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='btn-trash btn-sm'\r\n\t\t\t\t\t\tonClick={onDelete}>\r\n\t\t\t\t\t\t<i className='fa fa-trash-o'></i>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<i className='fa fa-heart'></i>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default PostListItem;\r\n\r\n","import PostList from './post-list';\r\n\r\nexport default PostList;","import React from 'react';\r\nimport PostListItem from '../post-list-item';\r\n\r\nimport './post-list.css';\r\n\r\nconst PostList = ({posts, onDelete, onToggle}) => {\t\t\t// выводим пропсы\r\n\r\n\t\r\n\tconst elements = posts.map(elem => {\t\t\t\t\t// создаем отдельный пост\r\n\r\n\t\tconst {id, ...otherProps} = elem;\t\t\t\t\t// дробление на ключи\r\n\r\n\t\treturn (\r\n\t\t\t<li key={id} className='list-group-item'>\r\n\t\t\t\t<PostListItem\r\n\t\t\t\t{...otherProps}\r\n\t\t\t\tonDelete={() => onDelete(id)}\r\n\t\t\t\tonToggleImportant={() => onToggle(id, 1)}\r\n\t\t\t\tonToggleLiked={() => onToggle(id)} />\r\n\t\t\t</li>\r\n\t\t)\r\n\t});\r\n\r\n\treturn (\r\n\t\t<ul className='app-list list-group'>\r\n\t\t\t{elements}\r\n\t\t</ul>\r\n\t)\r\n}\r\n\r\nexport default PostList;","import PostStatusFilter from './post-status-filter';\r\n\r\nexport default PostStatusFilter;","import React, {Component} from 'react';\r\n\r\nimport './post-status-filter.css';\r\n\r\nexport default class PostStatusFilter extends Component {\r\n\r\n\tbuttons = [\t\t\t\t\t\t\t\t// создаем массив кнопок\r\n\t\t{name: 'all', label: 'All'},\r\n\t\t{name: 'like', label: 'Liked'}\r\n\t]\r\n\r\n\r\n\trender() {\r\n\t\tconst buttons = this.buttons.map(({name, label}) => {\r\n\t\t\tconst {filter, onFilterSelect} = this.props;\t\t// достаем пропсы\r\n\r\n\t\t\tconst active = filter === name;\t\t\t// проверка на совпадение фильтра\r\n\t\t\tconst clasS = active ? 'btn-info' : 'btn-outline-secondary'\t\t// добавление соответствующего класса\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<button\r\n\t\t\t\t\tkey={name}\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tclassName={`btn ${clasS}`}\r\n\t\t\t\t\tonClick={() => onFilterSelect(name)}>{label}</button>\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<div className='btn-group'>\r\n\t\t\t\t{buttons}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import PostAddForm from './post-add-form';\r\n\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\n\r\nimport './post-add-form.css';\r\n\r\nexport default class PostAddForm extends Component {\r\n\r\n\tstate = {\t\t\t\t\t\t\t\t\t// задаем содержимое input в стейт\r\n\t\ttext: ''\r\n\t}\r\n\r\n\tonValueChange = (e) => {\t\t\t\t// отслеживаем изменения в input\r\n\t\tthis.setState({\r\n\t\t\ttext:e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\tonSubmit = (e) => {\t\t\t\t\t\t\t// отправка поста\r\n\t\te.preventDefault();\t\t\t\t\t\t// отключение базовых действий кнопки\r\n\t\tthis.props.onAdd(this.state.text)\t// добавляем пост\r\n\t\tthis.setState({\t\t\t\t\t\t\t// очищаем input после отправки\r\n\t\t\ttext: ''\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form className='bottom-panel d-flex'\r\n\t\t\tonSubmit={this.onSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='What are you thinking about?'\r\n\t\t\t\t\tclassName='form-control new-post-label'\r\n\t\t\t\t\tonChange={this.onValueChange}\r\n\t\t\t\t\tvalue={this.state.text} />\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype='submit'\r\n\t\t\t\t\tclassName='btn btn-outline-secondary'>Add</button>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\n","import App from './app';\r\n\r\nexport default App;","import React, {Component} from 'react';\r\nimport nextId from \"react-id-generator\";\t\t// генератор id\r\n\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport PostList from '../post-list';\r\nimport PostStatusFilter from '../post-status-filter';\r\nimport PostAddForm from '../post-add-form';\r\n\r\nimport './app.css';\r\n\r\nexport default class App extends Component{\r\n\r\n\tstate = {\r\n\t\tdata : [\t\t\t\t// База данных постов\r\n\t\t\t{ label: 'Gonna learn React...', important: false, like: false, id: nextId() },\r\n\t\t\t{ label: 'I thougth that will be way easyier..', important: false, like: false, id: nextId() },\r\n\t\t\t{ label: 'Shit!', important: false, like: false, id: nextId() },\r\n\t\t],\r\n\t\tterm: '',\t\t\t// поиск\r\n\t\tfilter: 'all'\t\t// класс кнопки  по умолчанию\r\n\t}\r\n\r\n\tdeleteItem = (id) => {\t\t// удаление поста\r\n\t\tthis.setState(({data}) => {\r\n\t\t\tconst index = data.findIndex(elem => elem.id === id);\t\t\t\t\t\t// находим пост по индексу\r\n\t\t\tconst newArr = [...data.slice(0, index), ...data.slice(index + 1)]\t// создаем новый массив без удаленного поста\r\n\t\t\treturn {\r\n\t\t\t\tdata: newArr\t\t// обновляем массив в state\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tonAdd = (body) => {\t\t\t\t// добавление поста\r\n\t\tif (body.length !== 0) {\t// проверка на наличие символов в input\r\n\t\t\tconst newItem = {\r\n\t\t\t\tlabel: body,\r\n\t\t\t\timportant: false,\r\n\t\t\t\tid: nextId()\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState(({ data }) => {\r\n\t\t\t\tconst newArr = [...data, newItem];\t// создаем новый массив с добавлением поста\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdata: newArr\t\t\t\t\t\t\t// обновляем массив в state\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tonToggle = (id, i = 0) => {\t\t\t\t// переключение поста на important и like\r\n\t\tthis.setState(({data}) => {\r\n\t\t\tconst index = data.findIndex(elem => elem.id === id);\t\t// находим пост по индексу\r\n\t\t\tconst old = data[index];\t\t\t\t\t\t// выделяем пост\r\n\t\t\tconst newItem = i === 1 ? { ...old, important: !old.important } : { ...old, like: !old.like };\t\t// тогглим выбранный класс \r\n\t\t\tconst newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)]\t// создаем новый массив\r\n\t\t\treturn {\r\n\t\t\t\tdata: newArr\t\t\t\t\t\t\t// обновляем массив в state\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tsearchPosts = (items, term) => {\t\t\t\t\t// поиск постов\r\n\t\tif (term.length === 0) return items;\r\n\t\treturn items.filter(item => item.label.toUpperCase().indexOf(term.toUpperCase()) > -1)\t\t// возвращаем совпадения\r\n\t}\r\n\r\n\tfilterPosts = (items, filter) => {\t\t// фильтр постов\r\n\t\tif (filter === 'like') {\r\n\t\t\treturn items.filter(item => item.like)\t\t// возвращаем лайкнутые посты\r\n\t\t}\r\n\t\treturn items\r\n\t}\r\n\r\n\tonUpdateSearch = (term) => {\r\n\t\tthis.setState({term})\r\n\t}\r\n\r\n\tonFilterSelect = (filter) => {\r\n\t\tthis.setState({filter})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst {data,term, filter} = this.state\t\t\t\t\t\t// достаем переменные из state\r\n\r\n\t\tconst liked = data.filter(elem => elem.like).length;\t\t// количество лайкнутых постов\r\n\t\tconst allPosts = data.length;\t\t\t\t\t\t\t\t\t\t// количество всех постов\r\n\r\n\t\tconst newData = data.filter(el => {\t// фильтруем базу данных постов на наличие label\r\n\t\t\tif (el.label) {\r\n\t\t\t\treturn el;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t\tconst visiblePosts = this.filterPosts(this.searchPosts(newData, term), filter);\t//показываем посты после поиска и фильтра\r\n\r\n\t\treturn (\r\n\t\t\t<div className='app'>\r\n\t\t\t\t<AppHeader\r\n\t\t\t\t\tliked={liked}\t\t\t\t\t\t\t\t\t\t\t// задаем пропсы на компоненты\r\n\t\t\t\t\tallPosts={allPosts} />\r\n\t\t\t\t<div className='search-panel d-flex'>\r\n\t\t\t\t\t<SearchPanel\r\n\t\t\t\t\t\tonUpdateSearch={this.onUpdateSearch} />\r\n\t\t\t\t\t<PostStatusFilter \r\n\t\t\t\t\t\tfilter={filter}\r\n\t\t\t\t\t\tonFilterSelect={this.onFilterSelect} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<PostList \r\n\t\t\t\t\tposts={visiblePosts}\r\n\t\t\t\t\tonDelete={this.deleteItem}\r\n\t\t\t\t\tonToggle={this.onToggle}\r\n\t\t\t\t\t />\r\n\t\t\t\t<PostAddForm \r\n\t\t\t\t\tonAdd={this.onAdd} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\t\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}